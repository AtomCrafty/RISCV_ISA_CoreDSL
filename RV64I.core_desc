import "RV32I.core_desc"

InstructionSet RV64I extends RV32I {
    instructions{
        LWU { //    80000104: 0000ef03            lwu t5,0(ra)
            encoding: imm[11:0]s :: rs1[4:0] :: b110 :: rd[4:0] :: b0000011;
            args_disass:"{name(rd)}, {imm}({name(rs1)})";
            behavior: {
	            unsigned offs = (signed)X[rs1]+imm;
	            if(rd!=0) X[rd]=(unsigned<32>)MEM[offs];
            }
        }
        LD{
            encoding: imm[11:0]s :: rs1[4:0] :: b011 :: rd[4:0] :: b0000011;
            args_disass:"{name(rd)}, {imm}({name(rs1)})";
            behavior: {
	            unsigned offs = (signed)X[rs1] + imm;
	            if(rd!=0) X[rd]=(unsigned<64>)MEM[offs];
            }
        }
        SD{
            encoding: imm[11:5]s :: rs2[4:0] :: rs1[4:0] :: b011 :: imm[4:0]s :: b0100011;
            args_disass:"{name(rs2)}, {imm}({name(rs1)})";
            behavior: {
            	unsigned offs = (signed)X[rs1] + imm;
            	MEM[offs] = X[rs2];
            }
        }
        SLLI {
            encoding: b000000 :: shamt[5:0] :: rs1[4:0] :: b001 :: rd[4:0] :: b0010011;
            args_disass:"{name(rd)}, {name(rs1)}, {shamt}";
            behavior: if(rd != 0) X[rd] = X[rs1] << shamt;
        }
        SRLI {
            encoding: b000000 :: shamt[5:0] :: rs1[4:0] :: b101 :: rd[4:0] :: b0010011;
            args_disass:"{name(rd)}, {name(rs1)}, {shamt}";
            behavior: if(rd != 0) X[rd] = ((unsigned<64>)X[rs1])>>shamt;
        }
        SRAI {
            encoding: b010000 :: shamt[5:0] :: rs1[4:0] :: b101 :: rd[4:0] :: b0010011;
            args_disass:"{name(rd)}, {name(rs1)}, {shamt}";
            behavior: if(rd != 0) X[rd] = ((signed<64>)X[rs1])>>shamt;
        }
        ADDIW {
            encoding: imm[11:0]s :: rs1[4:0] :: b000 :: rd[4:0] :: b0011011;
            args_disass:"{name(rd)}, {name(rs1)}, {imm}";
            behavior: {
	            if(rd != 0){
	                unsigned<32> res = ((signed<32>)X[rs1]) + imm;
	                X[rd] = res;
	            } 
            }
        }
        SLLIW {
            encoding: b0000000 :: shamt[4:0] :: rs1[4:0] :: b001 :: rd[4:0] :: b0011011;
            args_disass:"{name(rd)}, {name(rs1)}, {shamt}";
            behavior: {
	            if(rd != 0){
	                unsigned<32> sh_val = ((unsigned<32>)X[rs1])<< shamt;
	                X[rd] = (signed<64>)sh_val;
	            } 
            }
        }
        SRLIW {
            encoding: b0000000 :: shamt[4:0] :: rs1[4:0] :: b101 :: rd[4:0] :: b0011011;
            args_disass:"{name(rd)}, {name(rs1)}, {shamt}";
            behavior: {
	            if(rd != 0){
	                unsigned<32> sh_val =((unsigned<32>)X[rs1])>> shamt;
	                X[rd] = (signed<64>)sh_val;
	            }           
            }
        }
        SRAIW {
            encoding: b0100000 :: shamt[4:0] :: rs1[4:0] :: b101 :: rd[4:0] :: b0011011;
            args_disass:"{name(rd)}, {name(rs1)}, {shamt}";
            behavior: {
	            if(rd != 0){
	                signed<32> sh_val = ((signed<32>)X[rs1])>> shamt;    
	                X[rd] = (signed<64>)sh_val;
	            }
            }
        }
        ADDW {
            encoding: b0000000 :: rs2[4:0] :: rs1[4:0] :: b000 :: rd[4:0] :: b0111011;
            behavior: {
	            if(rd != 0){
	                signed<32> res = (signed<32>)X[rs1] + (signed<32>)X[rs2];
	                X[rd] = (signed<64>)res;
	            } 
            }
        }
        SUBW {
            encoding: b0100000 :: rs2[4:0] :: rs1[4:0] :: b000 :: rd[4:0] :: b0111011;
            behavior: {
            	if(rd != 0){
	                signed<32> res = (signed<32>)X[rs1] - (signed<32>)X[rs2];
	                X[rd] = (signed<64>)res;
	            } 
            }
        }
        SLLW {
            encoding: b0000000 :: rs2[4:0] :: rs1[4:0] :: b001 :: rd[4:0] :: b0111011;
            args_disass:"{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
	            if(rd != 0){
	                unsigned count = (unsigned)X[rs2] & 0x1f;
	                unsigned<32> sh_val =((unsigned<32>)X[rs1]) << count;
	                X[rd] = (unsigned<64>)sh_val;
	            } 
            }
        }
        SRLW {
            encoding: b0000000 :: rs2[4:0] :: rs1[4:0] :: b101 :: rd[4:0] :: b0111011;
            args_disass:"{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
    	        if(rd != 0){
	                unsigned count = (unsigned)X[rs2] & 0x1f;
	                unsigned<32> sh_val =((unsigned<32>)X[rs1]) >> count;
	                X[rd] = (unsigned<64>)sh_val;
	            } 
            }
        }
        SRAW {
            encoding: b0100000 :: rs2[4:0] :: rs1[4:0] :: b101 :: rd[4:0] :: b0111011;
            args_disass:"{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
	            if(rd != 0){
	                unsigned count = (unsigned)X[rs2] & 0x1f;
	                signed<32> sh_val =((signed<32>)X[rs1]) >> count;
	                X[rd] = (signed<64>)sh_val;
    	        } 
            }
        }
    }    
}

