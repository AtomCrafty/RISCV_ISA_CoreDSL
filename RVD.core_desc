import "RISCVBase.core_desc"

// TODO: review instruction description wrt. Spec after type system is fixed
InstructionSet RV32D extends RISCVBase{
    architectural_state {
        unsigned FLEN;
        unsigned FFLAG_MASK = 0x1f;

	   	unsigned<FLEN> F[32];
       	unsigned<32> FCSR;
    }    
    functions {
        extern unsigned fadd_d(unsigned, unsigned, unsigned char);
        extern unsigned fsub_d(unsigned, unsigned, unsigned char);
        extern unsigned fmul_d(unsigned, unsigned, unsigned char);
        extern unsigned fdiv_d(unsigned, unsigned, unsigned char);
        extern unsigned fmadd_d(unsigned, unsigned, unsigned, unsigned, unsigned char);
        extern unsigned fsel_d(unsigned, unsigned, unsigned);
        extern unsigned fsqrt_d(unsigned, unsigned char);
        extern unsigned fcmp_d(unsigned, unsigned, unsigned);
        extern unsigned fcvt_d(unsigned, unsigned, unsigned char);
        extern unsigned fconv_d2f(unsigned long);
        extern unsigned long fconv_f2d(unsigned);
        extern unsigned long fcvt_32_64(unsigned, unsigned, unsigned char);
        extern unsigned long fcvt_64_32(unsigned, unsigned, unsigned char);
        extern unsigned unbox_d(unsigned long);
        extern unsigned fclass_d(unsigned);
        extern unsigned fget_flags();
    }
    instructions{
        FLD {
            encoding: imm[11:0]s :: rs1[4:0] :: b011 :: rd[4:0] :: b0000111;
            args_disass:"f{rd}, {imm}({name(rs1)})";
            behavior: {
                unsigned<XLEN> offs = X[rs1] + imm;
                unsigned long res = MEM[offs];
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1<<64) + res;
                }
            }
        }
        FSD {
            encoding: imm[11:5]s :: rs2[4:0] :: rs1[4:0] :: b011 :: imm[4:0]s :: b0100111;
            args_disass:"f{rs2}, {imm}({name(rs1)})";
            behavior: {
                unsigned<XLEN> offs = X[rs1] + imm;
                MEM[offs]=F[rs2];
            }
        }
        FMADD_D {
            encoding: rs3[4:0] :: b01 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1000011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}, f{rs3}";
            behavior: {
                //F[rd]f= F[rs1]f * F[rs2]f + F[rs3]f;
                unsigned long res = fmadd_d((unsigned long)F[rs1], (unsigned long)F[rs2], (unsigned long)F[rs3], 0U, rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FMSUB_D {
            encoding: rs3[4:0] :: b01 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1000111;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}, f{rs3}";
            behavior: {
                //F[rd]f=F[rs1]f * F[rs2]f - F[rs3]f;
                unsigned long res = fmadd_d((unsigned long)F[rs1], (unsigned long)F[rs2], (unsigned long)F[rs3], 1U, rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FNMADD_D {
            encoding: rs3[4:0] :: b01 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1001111;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}, f{rs3}";
            behavior: {
                //F[rd]f=-F[rs1]f * F[rs2]f + F[rs3]f;
                unsigned long res = fmadd_d((unsigned long)F[rs1], (unsigned long)F[rs2], (unsigned long)F[rs3], 2U, rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FNMSUB_D {
            encoding: rs3[4:0] :: b01 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1001011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}, f{rs3}";
            behavior: {
                //F[rd]f=-F[rs1]f * F[rs2]f - F[rs3]f;
                unsigned long res = fmadd_d((unsigned long)F[rs1], (unsigned long)F[rs2], (unsigned long)F[rs3], 3U, rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FADD_D {
            encoding: b0000001 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}";
            behavior: {
                // F[rd]f = F[rs1]f + F[rs2]f;
                unsigned long res = fadd_d((unsigned long)F[rs1], (unsigned long)F[rs2], rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FSUB_D {
            encoding: b0000101 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}";
            behavior: {
                // F[rd]f = F[rs1]f - F[rs2]f;
                unsigned long res = fsub_d((unsigned long)F[rs1], (unsigned long)F[rs2], rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FMUL_D {
            encoding: b0001001 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}";
            behavior: {
                // F[rd]f = F[rs1]f * F[rs2]f;
                unsigned long res = fmul_d((unsigned long)F[rs1], (unsigned long)F[rs2], rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FDIV_D {
            encoding: b0001101 :: rs2[4:0] :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}, f{rs2}";
            behavior: {
                // F[rd]f = F[rs1]f / F[rs2]f;
                unsigned long res = fdiv_d((unsigned long)F[rs1], (unsigned long)F[rs2], rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FSQRT_D {
            encoding: b0101101 :: b00000 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}";
            behavior: {
                //F[rd]f=sqrt(F[rs1]f);
                unsigned long res = fsqrt_d((unsigned long)F[rs1], rm<7? rm: (unsigned char)FCSR);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FSGNJ_D {
            encoding: b0010001 :: rs2[4:0] :: rs1[4:0] :: b000 :: rd[4:0] :: b1010011;
            args_disass:"f{rd}, f{rs1}, f{rs2}";
            behavior: {
                unsigned long ONE = 1;
                unsigned long MSK1 = ONE<<63;
                unsigned long MSK2 = MSK1-1;
                unsigned long res = ((unsigned long)F[rs1] & MSK2) | ((unsigned long)F[rs2] & MSK1);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
        FSGNJN_D {
            encoding: b0010001 :: rs2[4:0] :: rs1[4:0] :: b001 :: rd[4:0] :: b1010011;
            args_disass:"f{rd}, f{rs1}, f{rs2}";
            behavior: {
                unsigned long ONE = 1;
                unsigned long MSK1 = ONE<<63;
                unsigned long MSK2 = MSK1-1;
                unsigned long res = ((unsigned long)F[rs1] & MSK2) | (~(unsigned long)F[rs2] & MSK1);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
        FSGNJX_D {
            encoding: b0010001 :: rs2[4:0] :: rs1[4:0] :: b010 :: rd[4:0] :: b1010011;
            args_disass:"f{rd}, f{rs1}, f{rs2}";
            behavior: {
                unsigned long ONE = 1;
                unsigned long MSK1 = ONE<<63;
                unsigned long res = (unsigned long)F[rs1] ^ ((unsigned long)F[rs2] & MSK1);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
        FMIN_D  {
            encoding: b0010101 :: rs2[4:0] :: rs1[4:0] :: b000 :: rd[4:0] :: b1010011;
            args_disass:"f{rd}, f{rs1}, f{rs2}";
            behavior: {
                //F[rd]f= choose(F[rs1]f<F[rs2]f, F[rs1]f, F[rs2]f);
                unsigned long res = fsel_d((unsigned long)F[rs1], (unsigned long)F[rs2], 0U);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FMAX_D {
            encoding: b0010101 :: rs2[4:0] :: rs1[4:0] :: b001 :: rd[4:0] :: b1010011;
            args_disass:"f{rd}, f{rs1}, f{rs2}";
            behavior: {
                //F[rd]f= choose(F[rs1]f>F[rs2]f, F[rs1]f, F[rs2]f);
                unsigned long res = fsel_d((unsigned long)F[rs1], (unsigned long)F[rs2], 1U);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FCVT_S_D {
            encoding: b0100000 :: b00001 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, f{rd}, f{rs1}";
            behavior: {
                unsigned res = fconv_d2f(F[rs1], rm);
                // NaN boxing
                F[rd] = (-1LL<<64) + res;
            }
        }
        FCVT_D_S {
            encoding: b0100001 :: b00000 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, f{rd}, f{rs1}";
            behavior: {
                unsigned long res = fconv_f2d((unsigned)F[rs1], rm);
                if(FLEN==64){
                    F[rd] = res;
                } else {
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
        FEQ_D {
            encoding: b1010001 :: rs2[4:0] :: rs1[4:0] :: b010 :: rd[4:0] :: b1010011;
            args_disass:"{name(rd)}, f{rs1}, f{rs2}";
            behavior: {
                X[rd]=fcmp_d((unsigned long)F[rs1], (unsigned long)F[rs2], 0U);
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FLT_D {
            encoding: b1010001 :: rs2[4:0] :: rs1[4:0] :: b001 :: rd[4:0] :: b1010011;
            args_disass:"{name(rd)}, f{rs1}, f{rs2}";
            behavior: {
                X[rd]=fcmp_d((unsigned long)F[rs1], (unsigned long)F[rs2], 2U);
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FLE_D {
            encoding: b1010001 :: rs2[4:0] :: rs1[4:0] :: b000 :: rd[4:0] :: b1010011;
            args_disass:"{name(rd)}, f{rs1}, f{rs2}";
            behavior: {
                X[rd]=fcmp_d((unsigned long)F[rs1], (unsigned long)F[rs2], 1U);
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FCLASS_D {
            encoding: b1110001 :: b00000 :: rs1[4:0] :: b001 :: rd[4:0] :: b1010011;
            args_disass:"{name(rd)}, f{rs1}";
            behavior: {
                X[rd]=fclass_d((unsigned long)F[rs1]);
            }
        }
        FCVT_W_D {
            encoding: b1100001 :: b00000 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}";
            behavior: {
                X[rd]= fcvt_64_32((unsigned long)F[rs1], 0U, rm);
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FCVT_WU_D {
            encoding: b1100001 :: b00001 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}";
            behavior: {
                //FIXME: should be zext accodring to spec but needs to be sext according to tests
                X[rd]= fcvt_64_32((unsigned long)F[rs1], 1U, rm);
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FCVT_D_W {
            encoding: b1101001 :: b00000 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, f{rd}, {name(rs1)}";
            behavior: {
                unsigned long res = fcvt_32_64((unsigned)X[rs1], 2U, rm);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
        FCVT_D_WU {
            encoding: b1101001 :: b00001 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, f{rd}, {name(rs1)}";
            behavior: {
                unsigned long res =fcvt_32_64((unsigned)X[rs1], 3U, rm);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
    }
}
InstructionSet RV64D extends RV32D{

    instructions{
        FCVT_L_D {
            encoding: b1100001 :: b00010 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}";
            behavior: {
                X[rd]= fcvt_d((unsigned long)F[rs1], 0U, rm);
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FCVT_LU_D {
            encoding: b1100001 :: b00011 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, {name(rd)}, f{rs1}";
            behavior: {
                X[rd]= fcvt_d((unsigned long)F[rs1], 1U, rm);
                unsigned flags = fget_flags();
                FCSR = (FCSR & ~FFLAG_MASK) | (flags & FFLAG_MASK);
            }
        }
        FCVT_D_L {
            encoding: b1101001 :: b00010 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, f{rd}, {name(rs1)}";
            behavior: {
                unsigned long res = fcvt_d(X[rs1], 2U, rm);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
        FCVT_D_LU {
            encoding: b1101001 :: b00011 :: rs1[4:0] :: rm[2:0] :: rd[4:0] :: b1010011;
            args_disass:"{name(rm)}, f{rd}, {name(rs1)}";
            behavior: {
                unsigned long res =fcvt_d(X[rs1], 3U, rm);
                if(FLEN==64)
                    F[rd] = res;
                else { // NaN boxing
                    F[rd] = (-1LL<<64) + res;
                }
            }
        }
        FMV_X_D {
            encoding: b1110001 :: b00000 :: rs1[4:0] :: b000 :: rd[4:0] :: b1010011;
            args_disass:"{name(rd)}, f{rs1}";
            behavior: {
                X[rd]=F[rs1]; //FIXME: sign extend
            }
        }
        FMV_D_X {
            encoding: b1111001 :: b00000 :: rs1[4:0] :: b000 :: rd[4:0] :: b1010011;
            args_disass:"f{rd}, {name(rs1)}";
            behavior: {
                F[rd] = X[rs1];
            }
        }
    }
}
    
    
