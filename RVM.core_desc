import "RISCVBase.core_desc"

InstructionSet RV32M extends RISCVBase {
    architectural_state {
        unsigned MUL_LEN=2*XLEN;
    }
    instructions{
        MUL{
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    signed<MUL_LEN> res = (signed<MUL_LEN>)(signed)X[rs1] * (signed<MUL_LEN>)(signed)X[rs2];
                    X[rd]= (unsigned<XLEN>)res;
                }
            }
        }
        MULH {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    signed<MUL_LEN> res = (signed<MUL_LEN>)(signed)X[rs1] * (signed<MUL_LEN>)(signed)X[rs2];
                    X[rd]= (unsigned<XLEN>)(res >> XLEN);
                }
            }
        }
        MULHSU {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    signed<MUL_LEN> res = (signed<MUL_LEN>)(signed)X[rs1] * (unsigned<MUL_LEN>)X[rs2];
                        X[rd]= (unsigned<XLEN>)(res >> XLEN);
                }
            }
        }
        MULHU {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    unsigned<MUL_LEN> res = (unsigned<MUL_LEN>)X[rs1] * (unsigned<MUL_LEN>)X[rs2];
                    X[rd]= (unsigned<XLEN>)(res >> XLEN);
                }
            }
        }
        DIV {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    if(X[rs2]!=0){
                        unsigned<XLEN> MMIN = 1<<(XLEN-1);
                        if(X[rs1]==MMIN && (signed<XLEN>)X[rs2]==-1)
                            X[rd] = MMIN;
                        else
                            X[rd] = (signed<XLEN>)X[rs1] / (signed<XLEN>)X[rs2];
                    }else
                        X[rd] = -1;
                }
            }
        }
        DIVU {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
            if(rd != 0){
                if(X[rs2]!=0)
                    X[rd] = X[rs1] / X[rs2];
                else
                    X[rd] = -1;
            }
            }
        }
        REM {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    if(X[rs2]!=0) {
                        unsigned<XLEN> MMIN = 1<<(XLEN-1);
                        if(X[rs1]==MMIN && (signed<XLEN>)X[rs2]==-1)
                            X[rd] = 0;
                        else
                            X[rd] = (signed<XLEN>)X[rs1] % (signed<XLEN>)X[rs2];
                    } else
                        X[rd] = X[rs1];
                }
            }
        }
        REMU {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b0110011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
            if(rd != 0){
                if(X[rs2]!=0)
                    X[rd] = X[rs1] % X[rs2];
                else
                    X[rd] = X[rs1];
            }
            }
        }
    }
}

InstructionSet RV64M extends RV32M {
    instructions{
        MULW{
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0111011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    X[rd]= (signed<MUL_LEN>)(signed<32>)X[rs1] * (signed<MUL_LEN>)(signed<32>)X[rs2];
                }
            }
        }
        DIVW {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b0111011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    if(X[rs2]!=0){
                        signed<32> MMIN = 1<<31;
                        if((signed<32>)X[rs1]==MMIN && (signed<32>)X[rs2]==-1)
                            X[rd] = -1<<31;
                        else
                            X[rd] = (signed<XLEN>)((signed<32>)X[rs1] / (signed<32>)X[rs2]);
                    }else
                        X[rd] = -1;
                }
            }
        }
        DIVUW {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b0111011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    if((unsigned<32>)X[rs2]!=0)
                        X[rd] = (signed<XLEN>)((unsigned<32>)X[rs1] / (unsigned<32>)X[rs2]);
                    else
                        X[rd] = -1;
                }
            }
        }
        REMW {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b0111011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    if(X[rs2]!=0) {
                        signed<32> MMIN = 1<<31;
                        if((signed<32>)X[rs1]==MMIN && (signed<32>)X[rs2]==-1)
                            X[rd] = 0;
                        else
                            X[rd] = (signed<XLEN>)((signed<32>)X[rs1] % (signed<32>)X[rs2]);
                    } else
                        X[rd] = (signed<XLEN>)((signed<32>)X[rs1]);
                }
            }
        }
        REMUW {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b0111011;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if(rd != 0){
                    if((unsigned<32>)X[rs2]!=0)
                        X[rd] = (signed<XLEN>)((unsigned<32>)X[rs1] % (unsigned<32>)X[rs2]);
                    else
                        X[rd] = (signed<XLEN>)((signed<32>)X[rs1]);
                }
            }
        }
    }
}
